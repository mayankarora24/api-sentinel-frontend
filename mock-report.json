{
	"@programName": "ZAP",
	"@version": "2.16.1",
	"@generated": "Mon, 28 Apr 2025 18:11:40",
	"site":[ 
		{
			"@name": "http://192.168.29.180:8091",
			"@host": "192.168.29.180",
			"@port": "8091",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "40018",
					"alertRef": "40018",
					"alert": "SQL Injection - SQLite",
					"name": "SQL Injection - SQLite",
					"riskcode": "3",
					"confidence": "2",
					"riskdesc": "High (Medium)",
					"desc": "<p>SQL injection may be possible.</p>",
					"instances":[ 
						{
							"id": "74",
							"uri": "http://192.168.29.180:8091/search?q=%27%28",
							"method": "GET",
							"param": "q",
							"attack": "'(",
							"evidence": "near \"(\": syntax error",
							"otherinfo": "RDBMS [SQLite] likely, given error message regular expression [near \".+\": syntax error] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised."
						}
					],
					"count": "1",
					"solution": "<p>Do not trust client side input, even if there is client side validation in place.</p><p>In general, type check all data on the server side.</p><p>If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'</p><p>If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.</p><p>If database Stored Procedures can be used, use them.</p><p>Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!</p><p>Do not create dynamic SQL queries using simple string concatenation.</p><p>Escape all data received from the client.</p><p>Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.</p><p>Apply the principle of least privilege by using the least privileged database user possible.</p><p>In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.</p><p>Grant the minimum database access that is necessary for the application.</p>",
					"otherinfo": "<p>RDBMS [SQLite] likely, given error message regular expression [near \".+\": syntax error] matched by the HTML results.</p><p>The vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised.</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</p>",
					"cweid": "89",
					"wascid": "19",
					"sourceid": "193"
				},
				{
					"pluginid": "10038",
					"alertRef": "10038-1",
					"alert": "Content Security Policy (CSP) Header Not Set",
					"name": "Content Security Policy (CSP) Header Not Set",
					"riskcode": "2",
					"confidence": "3",
					"riskdesc": "Medium (High)",
					"desc": "<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</p>",
					"instances":[ 
						{
							"id": "21",
							"uri": "http://192.168.29.180:8091",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "22",
							"uri": "http://192.168.29.180:8091/.git",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "1",
							"uri": "http://192.168.29.180:8091/.git/config",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "31",
							"uri": "http://192.168.29.180:8091/admin",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "29",
							"uri": "http://192.168.29.180:8091/admin/delete_user",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "37",
							"uri": "http://192.168.29.180:8091/login",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "39",
							"uri": "http://192.168.29.180:8091/nuke",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "25",
							"uri": "http://192.168.29.180:8091/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "23",
							"uri": "http://192.168.29.180:8091/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "44",
							"uri": "http://192.168.29.180:8091/sneaky",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "54",
							"uri": "http://192.168.29.180:8091/update_profile",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "51",
							"uri": "http://192.168.29.180:8091/user",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						},
						{
							"id": "10",
							"uri": "http://192.168.29.180:8091/login",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "13",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</p><p>https://www.w3.org/TR/CSP/</p><p>https://w3c.github.io/webappsec-csp/</p><p>https://web.dev/articles/csp</p><p>https://caniuse.com/#feat=contentsecuritypolicy</p><p>https://content-security-policy.com/</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "34"
				},
				{
					"pluginid": "10098",
					"alertRef": "10098",
					"alert": "Cross-Domain Misconfiguration",
					"name": "Cross-Domain Misconfiguration",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.</p>",
					"instances":[ 
						{
							"id": "2",
							"uri": "http://192.168.29.180:8091/apispec_1.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Access-Control-Allow-Origin: *",
							"otherinfo": "The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."
						}
					],
					"count": "1",
					"solution": "<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).</p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</p>",
					"otherinfo": "<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</p>",
					"reference": "<p>https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy</p>",
					"cweid": "264",
					"wascid": "14",
					"sourceid": "1"
				},
				{
					"pluginid": "10020",
					"alertRef": "10020-1",
					"alert": "Missing Anti-clickjacking Header",
					"name": "Missing Anti-clickjacking Header",
					"riskcode": "2",
					"confidence": "2",
					"riskdesc": "Medium (Medium)",
					"desc": "<p>The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.</p>",
					"instances":[ 
						{
							"id": "0",
							"uri": "http://192.168.29.180:8091/.git/config",
							"method": "GET",
							"param": "x-frame-options",
							"attack": "",
							"evidence": "",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.</p><p>If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.</p>",
					"otherinfo": "",
					"reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</p>",
					"cweid": "1021",
					"wascid": "15",
					"sourceid": "3"
				},
				{
					"pluginid": "10036",
					"alertRef": "10036",
					"alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.</p>",
					"instances":[ 
						{
							"id": "24",
							"uri": "http://192.168.29.180:8091",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "26",
							"uri": "http://192.168.29.180:8091/.git",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "4",
							"uri": "http://192.168.29.180:8091/.git/config",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "35",
							"uri": "http://192.168.29.180:8091/admin",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "32",
							"uri": "http://192.168.29.180:8091/admin/delete_user",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "5",
							"uri": "http://192.168.29.180:8091/apispec_1.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "6",
							"uri": "http://192.168.29.180:8091/debug",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "40",
							"uri": "http://192.168.29.180:8091/login",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "43",
							"uri": "http://192.168.29.180:8091/nuke",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "14",
							"uri": "http://192.168.29.180:8091/profile",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "30",
							"uri": "http://192.168.29.180:8091/robots.txt",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "15",
							"uri": "http://192.168.29.180:8091/search?q=q",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "27",
							"uri": "http://192.168.29.180:8091/sitemap.xml",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "47",
							"uri": "http://192.168.29.180:8091/sneaky",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "57",
							"uri": "http://192.168.29.180:8091/update_profile",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "53",
							"uri": "http://192.168.29.180:8091/user",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "20",
							"uri": "http://192.168.29.180:8091/user/10",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "3",
							"uri": "http://192.168.29.180:8091/admin/delete_user",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "12",
							"uri": "http://192.168.29.180:8091/login",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "11",
							"uri": "http://192.168.29.180:8091/nuke",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "16",
							"uri": "http://192.168.29.180:8091/sneaky",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						},
						{
							"id": "19",
							"uri": "http://192.168.29.180:8091/update_profile",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/3.1.3 Python/3.13.3",
							"otherinfo": ""
						}
					],
					"count": "22",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.</p>",
					"otherinfo": "",
					"reference": "<p>https://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)</p><p>https://www.troyhunt.com/shhh-dont-let-your-response-headers/</p>",
					"cweid": "497",
					"wascid": "13",
					"sourceid": "34"
				},
				{
					"pluginid": "10021",
					"alertRef": "10021",
					"alert": "X-Content-Type-Options Header Missing",
					"name": "X-Content-Type-Options Header Missing",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
					"instances":[ 
						{
							"id": "7",
							"uri": "http://192.168.29.180:8091/.git/config",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "8",
							"uri": "http://192.168.29.180:8091/apispec_1.json",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "9",
							"uri": "http://192.168.29.180:8091/debug",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "17",
							"uri": "http://192.168.29.180:8091/search?q=q",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "13",
							"uri": "http://192.168.29.180:8091/nuke",
							"method": "POST",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"id": "18",
							"uri": "http://192.168.29.180:8091/sneaky",
							"method": "POST",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						}
					],
					"count": "6",
					"solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
					"otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
					"reference": "<p>https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)</p><p>https://owasp.org/www-community/Security_Headers</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "3"
				}
			]
		}
	],
	"sequences":[
	]

}
